var documenterSearchIndex = {"docs":
[{"location":"solvers/#Solvers","page":"Solvers","title":"Solvers","text":"","category":"section"},{"location":"solvers/#CommonSolve.solve","page":"Solvers","title":"CommonSolve.solve","text":"solve(bp::T, alg::A; kwargs...) where {T<:ConstantRateBranchingProblem, A<:Union{SciMLBase.AbstractSciMLAlgorithm,Nothing}}\n\nSolve a branching stochastic process with constant branching rate defined by the ConstantRateBranchingProblem bp. The positional argument alg and optional keyword arguments kwargs... are passed to the solver used to sample trajectories of the underlying SDE problem.\n\nSee also: ConstantRateBranchingProblem, solve_and_split_constantrate, common solver options\n\n\n\n\n\n","category":"function"},{"location":"solvers/#BranchingProcesses.solve_and_split_constantrate","page":"Solvers","title":"BranchingProcesses.solve_and_split_constantrate","text":"solve_and_split_constantrate(prob::T, λ::S, nchild::O, alg::A; kwargs...) where {T<:SDEProblem, S<:Real, O<:Union{Integer,DiscreteUnivariateDistribution}, A<:Union{SciMLBase.AbstractSciMLAlgorithm,Nothing}}\n\nRecursively solve a branching stochastic process where the single-particle dynamics is defined by the SDE problem prob, the branching rate is a constant λ, and the number of children nchild of each particle is either a non-negative integer or a discrete distribution from which the number of children is sampled. The positional argument alg and optional keyword arguments kwargs... are passed to the solver used to sample the trajectory of each particle.\n\nThe timespan of the problem prob defines the total time interval for the branching process. A lifetime for the first particle is sampled from an exponential distribution with rate λ. If the lifetime is larger than the total time interval, the problem is solved until the end of the original interval and a solution node is returned without children. If the lifetime is smaller than the total time interval, the problem is solved until the sampled lifetime, and a solution node is returned with recursively solved children for the remaining time interval.\n\nSee also: SDE problems, sample_lifetime_constantrate, common solver options\n\n\n\n\n\n","category":"function"},{"location":"solvers/#BranchingProcesses.sample_lifetime_constantrate","page":"Solvers","title":"BranchingProcesses.sample_lifetime_constantrate","text":"sample_lifetime_constantrate(λ::T) where T <: Real\n\nSample the lifetime of a particle when the branching rate is a constant λ independent of time or the value of the process. This is equivalent to sampling from an exponential distribution with rate λ.\n\nNote that this is not the same as a ConstantRateJump where the rate is only constant between jumps.\n\n\n\n\n\n","category":"function"},{"location":"solvers/#BranchingProcesses.sample_offspring","page":"Solvers","title":"BranchingProcesses.sample_offspring","text":"sample_offspring(nchild::O) where O<:Union{Integer,DiscreteUnivariateDistribution}\n\nSample the number of offspring for a particle. If the input nchild is an integer, that integer is returned. If nchild is a discrete distribution, a sample from that distribution is returned.\n\n\n\n\n\n","category":"function"},{"location":"#BranchingProcesses.jl","page":"Introduction","title":"BranchingProcesses.jl","text":"","category":"section"},{"location":"#BranchingProcesses.BranchingProcesses","page":"Introduction","title":"BranchingProcesses.BranchingProcesses","text":"Exports\n\nImports\n\nAbstractTrees\nBase\nCore\nDistributions\nDocStringExtensions\nRecipesBase\nSciMLBase\n\nBranchingProcesses\n\n(Image: Dev) (Image: Build Status)\n\nBranchingProcesses is a Julia package for simulation and parameter inference in branching stochastic processes, also known as branching particle systems. \n\nBranching stochastic processes are processes where \"particles\" (which could represent cells, individuals, or species depending on the context) have one or more degrees of freedom X(t) whose dynamics is described by a stationary Markov process. After a certain lifetime, a particle splits into kgeq 0 identical, independent offspring particles with probability p_k. This process is repeated indefinitely, producing a collection of N(t) particles at time t. Splitting happens with a rate function gamma(xtau) that may depend on the current state x and age tau of the particle.\n\nExamples of such processes are:\n\nClassical branching processes, which correspond to the case X(t)equiv 1.\nBranching Brownian motion\nBranching Ornstein-Uhlenbeck processes used in phylogenetic comparative methods\n\nAlthough the package can probably be used or extended for generic phylodynamic analyses, the dedicated PhyloTraits package will probably be more appropriate for that purpose.\n\nThe primary motivation for this package is to provide a framework for the analysis of a \"memory\" phenomenon that can occur in branching stochastic processes if the relaxation rate of the single-particle dynamics is slow relative to the branching rate. In this case the system can remember its initial state, or, put differently, large fluctuations early in the expansion can have a long-lasting effect on the state of the system. The study of this phenomenon implicitly traces its roots (no pun intended) to Luria and Delbrück's fluctuation analysis. More recently, it has been\n\nstudied mathematically in branching Ornstein-Uhlenbeck processes,\nobserved experimentally in proliferating cancer cell populations\nproposed as an important property of proliferating active matter\n\nStudying this phenomenon requires the analysis of fluctuations across multiple independent realizations of the branching process. This is in contrast to the more common use of branching processes in population and phylogenetics, where the focus is on the evolution of a single lineage.\n\nSupported stochastic processes\n\nThe aim is to support any process that can be implemented as a stochastic differential equation, jump process, or jump diffusion equation. \n\nSpecific processes that will be implemented in the package are:\n\nBrownian motion\nOrnstein-Uhlenbeck process\nBirth-death process\nThe stochastic gene expression models of Gorin et al (2022)\n\nSupported rate function\n\nAny valid constant or variable rate function. The default is a constant rate function with parameter 1, that is, the probability for a particle to be alive with lifetime tau is exp(-tau).\n\nSupported splitting distributions\n\nAny discrete univariate distribution (default: Dirac with parameter 2, that is, all particles split into two offspring particles).\n\n\n\n\n\n","category":"module"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/#Problem-types","page":"Types","title":"Problem types","text":"","category":"section"},{"location":"types/#BranchingProcesses.ConstantRateBranchingProblem","page":"Types","title":"BranchingProcesses.ConstantRateBranchingProblem","text":"struct ConstantRateBranchingProblem{P<:Union{SciMLBase.AbstractJumpProblem, SciMLBase.AbstractSDEProblem}, R<:Real, O<:Union{Integer, Distributions.DiscreteUnivariateDistribution, Distributions.UnivariateDistribution{Distributions.Discrete}, Distributions.DiscreteDistribution{Distributions.Univariate}}} <: BranchingProcesses.BranchingProblem\n\nA structure to define a branching stochastic process with constant branching rate.\n\nFields\n\nprob: The SDE or jump process problem defining the single-particle dynamics of the branching process, an instance of SciMLBase.AbstractSDEProblem or SciMLBase.AbstractJumpProblem.\nbranchrate: The branching rate of the process, which must be a positive real number.\nnchild: The number of children to be created for each particle, which can be a non-negative integer or a discrete distribution with non-negative support from which the number of children is sampled.\n\n\n\n\n\n","category":"type"},{"location":"types/#BranchingProcesses.BranchingSDEProblem","page":"Types","title":"BranchingProcesses.BranchingSDEProblem","text":"struct BranchingSDEProblem{P<:SciMLBase.SDEProblem, R<:Union{Function, Real}, O<:Union{Integer, Distributions.DiscreteUnivariateDistribution, Distributions.UnivariateDistribution{Distributions.Discrete}, Distributions.DiscreteDistribution{Distributions.Univariate}}} <: BranchingProcesses.BranchingProblem\n\nA structure to define a branching stochastic process.\n\nFields\n\nprob: The SDE problem defining the single-particle dynamics of the branching process, an instance of SciMLBase.SDEProblem.\nbranchrate: The branching rate of the process, which can be a constant or a function of time and/or the state of the process. If a constant, it must be a positive real number.\nnchild: The number of children to be created for each particle, which can be a non-negative integer or a discrete distribution with non-negative support from which the number of children is sampled.\n\n\n\n\n\n","category":"type"},{"location":"types/#Solution-types","page":"Types","title":"Solution types","text":"","category":"section"},{"location":"types/#BranchingProcesses.BranchingProcessSolution","page":"Types","title":"BranchingProcesses.BranchingProcessSolution","text":"struct BranchingProcessSolution{T<:Union{SciMLBase.DESolution, SciMLBase.SciMLSolution}}\n\nA tree structure to hold a solution of a branching stochastic process.\n\nFields\n\nsol: The solution, that is, sample trajectory, of the particle associated to the node, which is an instance of SciMLBase.AbstractSciMLSolution.\nchildren: a vector of BranchingProcessSolution instances representing the child particles of the current particle.\n\nThe solution type T must be the same for all nodes in the tree.\n\n\n\n\n\n","category":"type"},{"location":"types/#AbstractTrees.children","page":"Types","title":"AbstractTrees.children","text":"AbstractTrees.children(node::BranchingProcessSolution)\n\nReturn the children of a BranchingProcessSolution node.\n\n\n\n\n\n","category":"function"},{"location":"types/#AbstractTrees.nodevalue","page":"Types","title":"AbstractTrees.nodevalue","text":"AbstractTrees.nodevalue(node::BranchingProcessSolution)\n\nReturn the value of a BranchingProcessSolution node, defined as its final state value.\n\n\n\n\n\n","category":"function"}]
}
